---
- name: Load var file based on the OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}_{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      paths:
        - "{{ role_path }}/vars"

- name: Gather package facts
  ansible.builtin.package_facts:

- name: Install Nessus
  block:
    - name: Fetch list of keys in bucket
      ansible.builtin.aws_s3:
        bucket: "{{ package_bucket }}"
        mode: list
      become: no
      delegate_to: localhost
      register: keys

    - name: Install Nessus package file
      block:
        - name: Fetch specified Nessus package from S3
          ansible.builtin.aws_s3:
            bucket: "{{ package_bucket }}"
            object: "{{ package_file }}"
            dest: /tmp/{{ package_file }}
            mode: get
          become: no
          delegate_to: localhost

        - name: Copy local Nessus package to remote side
          ansible.builtin.copy:
            src: /tmp/{{ package_file }}
            dest: /tmp/{{ package_file }}
            mode: 0644

        - name: Install specified Nessus version
          ansible.builtin.apt:
            deb: /tmp/{{ package_file }}
            state: present

        - name: Delete Nessus package on remote side
          ansible.builtin.file:
            path: /tmp/{{ package_file }}
            state: absent

        - name: Delete local copy of Nessus package
          ansible.builtin.file:
            path: /tmp/{{ package_file }}
            state: absent
          become: no
          delegate_to: localhost
      vars:
        package_file: "{{ keys.s3_keys | select('search', package_file_regex) | first }}"
  # Only run this block if Nessus is not installed or is not the
  # correct version
  when: |
    ansible_facts.packages.nessus is not defined
    or ansible_facts.packages.nessus[0].version is not defined
    or not ansible_facts.packages.nessus[0].version is search(version) | bool

# "expect" and "jq" are used downstream to automate creation of Nessus users
- name: Install expect and jq packages
  ansible.builtin.package:
    name: "{{ package_names }}"
    state: present
