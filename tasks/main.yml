---
# tasks file for ansible-role-nessus

- name: Check if Nessus is installed
  command: "dpkg-query --show --showformat='${db:Status-Status}|${Version}\n' \
  nessus"
  register: dpkg_query_result
  ignore_errors: yes
  changed_when: false

- name: Set fact for "has latest Nessus installed"
  set_fact:
    has_latest: "{{ dpkg_query_result.stdout is \
    search('installed|{{ version }}') }}"

- name: Fetch specified Nessus package from S3
  aws_s3:
    bucket: "{{ package_bucket }}"
    object: "{{ package_file }}"
    dest: "/tmp/{{ package_file }}"
    mode: get
  become: no
  delegate_to: localhost
  when: not has_latest

- name: Copy local Nessus package (.deb) to remote side
  copy:
    src: "/tmp/{{ package_file }}"
    dest: "/tmp/{{ package_file }}"
    mode: 0644
  when: not has_latest

- name: Install specified Nessus version
  apt:
    deb: "/tmp/{{ package_file }}"
    state: present
  when: not has_latest

- name: Delete Nessus package (.deb) on remote side
  file:
    path: "/tmp/{{ package_file }}"
    state: absent
  when: not has_latest

- name: Delete local copy of Nessus package
  file:
    path: "/tmp/{{ package_file }}"
    state: absent
  become: no
  delegate_to: localhost
  when: not has_latest

- name: Load var file with package name(s) based on the OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        # Add regex_replace() filters to remove spaces and
        # slashes. This allows the OS family/distribution for Kali,
        # "Kali GNU/Linux", to be easily mapped to a vars file.
        - "{{ ansible_distribution | regex_replace('[ /]', '_') }}.yml"
        - "{{ ansible_os_family | regex_replace('[ /]', '_') }}.yml"
      paths:
        - "{{ role_path }}/vars"

# "expect" is used downstream to automate creation of Nessus users
- name: Install expect package
  package:
    name: "{{ expect_package_name }}"
    state: present
